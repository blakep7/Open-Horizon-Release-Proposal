name: Open Horizon Release Manager

on:
  workflow_dispatch:
    inputs:
      VERSION_JSON_FILE:
        description: "The version json file, check the ReadME for formatting instructions if you are attempting to generate it yourself"
        required: true
        type: string
      INCREMENT_MAJOR_VERSION:
        description: "Should the major (X.0.0) version be incremented?"
        required: true
        type: boolean
        default: false
      INCREMENT_MINOR_VERSION:
        description: "Should the minor (0.X.0) version be incremented?"
        required: true
        type: boolean
        default: false
      INCREMENT_PATCH_VERSION:
        description: "Should the patch (0.0.X) version be incremented?"
        required: true
        type: boolean
        default: true

env:
  GITHUB_REST_API_VERSION: 2022-11-28
  # Anax repo release manager variables
  ANAX_REPOSITORY_OWNER: ${{ github.repository_owner }}
  ANAX_REPOSITORY_NAME: anax
  ANAX_RELEASE_MANAGER_FILE_NAME: release.yml
  ANAX_RELEASE_ENVIRONMENT_NAME: release_environment
  ANAX_RELEASE_MANAGER_BRANCH: dev-release-mgmt
  # Examples repo release manager variables
  EXAMPLES_REPOSITORY_OWNER: ${{ github.repository_owner }}
  EXAMPLES_REPOSITORY_NAME: examples
  EXAMPLES_RELEASE_MANAGER_FILE_NAME: release.yml
  EXAMPLES_RELEASE_ENVIRONMENT_NAME: release_environment
  EXAMPLES_RELEASE_MANAGER_BRANCH: dev-release-mgmt

  # Needs 'repo' scope for org or anax
  OPENHORIZON_ORGANIZATION_RELEASE_TOKEN: ${{ secrets.OPENHORIZON_ORGANIZATION_RELEASE_TOKEN }}

jobs:

  release:
    runs-on: ubuntu-20.04

    environment: release_environment

    steps:
      # - name: Trigger Anax Release Manager
      #   run: |
      #     # Get Anax Release Environment ID
      #     echo "::debug::Start \"Get Anax Release Environment ID\" API Call"
      #     ANAX_RELEASE_ENVIRONMENT_ID=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/environments/${{ env.ANAX_RELEASE_ENVIRONMENT_NAME }}' \
      #         | \
      #         jq -r '.id')
      #     echo "::debug::Finish \"Get Anax Release Environment ID\" API Call"
      
      #     if [[ -z "$ANAX_RELEASE_ENVIRONMENT_ID" ]]; then
      #       echo "::error::Failed to get Anax Release Environment ID, check API Call"
      #       exit 1
      #     fi
      
      #     # Trigger Anax Release Manager
      #     echo "::debug::Start \"Trigger Anax Release Manager\" API Call"
      #     STATUS_CHECK_ONE=$( \
      #       curl -L \
      #         -w "%{http_code}\\n" \
      #         -X POST \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/workflows/${{ env.ANAX_RELEASE_MANAGER_FILE_NAME }}/dispatches' \
      #         -d '{"ref":"${{ env.ANAX_RELEASE_MANAGER_BRANCH }}","inputs":{"AGBOT_VERSION": "${{ env.AGBOT_VERSION }}","ANAX_VERSION": "${{ env.ANAX_VERSION }}","ANAX_K8S_VERSION": "${{ env.ANAX_K8S_VERSION }}","ANAX_CSS_VERSION": "${{ env.ANAX_CSS_VERSION }}","ANAX_ESS_VERSION": "${{ env.ANAX_ESS_VERSION }}"}}')

      #     if [[ "${STATUS_CHECK_ONE}" != *"204"* ]]; then
      #       echo "::error::Anax workflow dispatch API call returned bad status code"
      #       echo -e "Status:\n${STATUS_CHECK_ONE}"
      #       exit 1
      #     fi
      #     echo "::debug::Finish \"Trigger Anax Release Manager\" API Call"

      #     sleep 30

      #     # List most recent triggered workflows that are waiting for a deployment review, use jq to filter down to release runs created today
      #     echo "::debug::Start \"Get Anax Release Run ID\" API Call"
      #     ANAX_RELEASE_RUN_ID=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs?status=waiting&event=workflow_dispatch&per_page=10&page=1' \
      #         | \
      #         jq -r '[.workflow_runs[] | select( .path == ".github/workflows/${{ env.ANAX_RELEASE_MANAGER_FILE_NAME }}" )][0].id')
      #     echo "::debug::Finish \"Get Anax Release Run ID\" API Call"

      #     if [[ -z "$ANAX_RELEASE_RUN_ID" ]]; then
      #       echo "::error::Failed to get Anax Release Run ID, check API Call"
      #       exit 1
      #     fi

      #     sleep 30

      #     # Approve workflow run automatically as this workflow run was approved
      #     echo "::debug::Start \"Approve Anax Release Workflow Dispatch\" API Call"
      #     ACCEPT_ANAX_RELEASE_API_CALL_DATA=$(jq -c -n '{"environment_ids":[$ARGS.positional[]],"state":"approved","comment":"Triggered automatically via approval from open-horizon/release"}' --jsonargs $ANAX_RELEASE_ENVIRONMENT_ID)

      #     STATUS_CHECK_TWO=$( \
      #       curl -L \
      #         -w "%{http_code}\\n" \
      #         -X POST \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}/pending_deployments" \
      #         -d "${ACCEPT_ANAX_RELEASE_API_CALL_DATA}")
          
      #     if [[ "${STATUS_CHECK_TWO}" != *"200"* ]]; then
      #       echo "::error::Anax approve workflow dispatch API call returned bad status code"
      #       echo -e "Status:\n${STATUS_CHECK_TWO}"
      #       exit 1
      #     fi
      #     echo "::debug::Finish \"Approve Anax Release Workflow Dispatch\" API Call"

      #     sleep 30

      #     # Wait until the Anax Release Manager has succeeded
      #     echo "::debug::Start \"Wait for Anax Release Manager to Succeed\" API Call"
      #     check_status () {
      #     ANAX_RELEASE_STATUS=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}"\
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}" \
      #         | \
      #         jq -r '.status')
      #     }

      #     max_iterations=5
      #     check_status
      #     while [[ "${ANAX_RELEASE_STATUS}" != "completed" ]]; do
      #       sleep 360 #Release manager typically takes around 5.5 minutes
      #       check_status
      #       max_iterations=$((max_iterations-1))
      #       if [[ "$max_iterations" -le "0" ]]; then
      #         echo "::error::Anax Release Manager seems to be stuck, status won't hit completion"
      #         exit 1
      #       fi
      #     done
      #     echo "::debug::Finish \"Wait for Anax Release Manager to Succeed\" API Call"

      #     sleep 30

      #     echo "::debug::Start \"Get Success Status of Anax Release Workflow\" API Call"
      #     ANAX_RELEASE_CONCLUSION=$( \
      #         curl -L \
      #           -H "Accept: application/vnd.github+json" \
      #           -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}"\
      #           -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #           "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}" \
      #           | \
      #           jq -r '.conclusion')
          
      #     if [[ "${ANAX_RELEASE_CONCLUSION}" != "success" ]]; then
      #         echo "::error::Anax Release Manager appears to have failed or been cancelled"
      #         exit 1
      #     fi
      #     echo "::debug::Finish \"Get Success Status of Anax Release Workflow\" API Call"

      #     echo "::debug::Step Success"
      #   shell: bash
      #   env:
      #     AGBOT_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_agbot }}
      #     ANAX_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_anax }}
      #     ANAX_K8S_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_anax_k8s }}
      #     ANAX_CSS_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_cloud-sync-service }}
      #     ANAX_ESS_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_edge-sync-service }}

      # - name: Trigger Examples Release Manager
      #   run: |
      #     # Get Examples Release Environment ID
      #     echo "::debug::Start \"Get Examples Release Environment ID\" API Call"
      #     EXAMPLES_RELEASE_ENVIRONMENT_ID=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/environments/${{ env.EXAMPLES_RELEASE_ENVIRONMENT_NAME }}' \
      #         | \
      #         jq -r '.id')
      #     echo "::debug::Finish \"Get Examples Release Environment ID\" API Call"

      #     if [[ -z "$EXAMPLES_RELEASE_ENVIRONMENT_ID" ]]; then
      #       echo "::error::Failed to get Examples Release Environment ID, check API Call"
      #       exit 1
      #     fi

      #     # Trigger Examples Release Manager
      #     echo "::debug::Start \"Trigger Examples Release Manager\" API Call"
      #     TRIGGER_EXAMPLES_RELEASE_API_CALL_DATA=$(jq -c -n '{"ref":"${{ env.EXAMPLES_RELEASE_MANAGER_BRANCH }}","inputs":{"versionFileJSON": $jsonpayload}}' --arg jsonpayload "${JSON_PAYLOAD//\"/\"}")

      #     STATUS_CHECK_ONE=$( \
      #       curl -L \
      #         -w "%{http_code}\\n" \
      #         -X POST \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/actions/workflows/${{ env.EXAMPLES_RELEASE_MANAGER_FILE_NAME }}/dispatches \
      #         -d "${TRIGGER_EXAMPLES_RELEASE_API_CALL_DATA}")

      #     if [[ "${STATUS_CHECK_ONE}" != *"204"* ]]; then
      #       echo "::error::Examples workflow dispatch API call returned bad status code"
      #       echo -e "Status:\n${STATUS_CHECK_ONE}"
      #       exit 1
      #     fi
      #     echo "::debug::Finish \"Trigger Examples Release Manager\" API Call"

      #     sleep 30

      #     # List most recent triggered workflows that are waiting for a deployment review, use jq to filter down to release runs created today
      #     echo "::debug::Start \"Get Examples Release Run ID\" API Call"
      #     EXAMPLES_RELEASE_RUN_ID=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/actions/runs?status=waiting&event=workflow_dispatch&per_page=10&page=1' \
      #         | \
      #         jq -r '[.workflow_runs[] | select( .path == ".github/workflows/${{ env.EXAMPLES_RELEASE_MANAGER_FILE_NAME }}" )][0].id')
      #     echo "::debug::Finish \"Get Examples Release Run ID\" API Call"

      #     if [[ -z "$EXAMPLES_RELEASE_RUN_ID" ]]; then
      #       echo "::error::Failed to get Examples Release Run ID, check API Call"
      #       exit 1
      #     fi

      #     sleep 30

      #     # Approve workflow run automatically as this workflow run was approved
      #     echo "::debug::Start \"Approve Examples Release Workflow Dispatch\" API Call"
      #     ACCEPT_EXAMPLES_RELEASE_API_CALL_DATA=$(jq -c -n '{"environment_ids":[$ARGS.positional[]],"state":"approved","comment":"Triggered automatically via approval from open-horizon/release"}' --jsonargs $EXAMPLES_RELEASE_ENVIRONMENT_ID)

      #     STATUS_CHECK_TWO=$( \
      #       curl -L \
      #         -w "%{http_code}\\n" \
      #         -X POST \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         "https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/actions/runs/${EXAMPLES_RELEASE_RUN_ID}/pending_deployments" \
      #         -d "${ACCEPT_EXAMPLES_RELEASE_API_CALL_DATA}")
          
      #     if [[ "${STATUS_CHECK_TWO}" != *"200"* ]]; then
      #       echo "::error::Examples approve workflow dispatch API call returned bad status code"
      #       echo -e "Status:\n${STATUS_CHECK_TWO}"
      #       exit 1
      #     fi
      #     echo "::debug::Finish \"Approve Examples Release Workflow Dispatch\" API Call"

      #     sleep 30

      #     # Wait until the Examples Release Manager has succeeded
      #     echo "::debug::Start \"Wait for Examples Release Manager to Succeed\" API Call"
      #     check_status () {
      #     EXAMPLES_RELEASE_STATUS=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}"\
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         "https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/actions/runs/${EXAMPLES_RELEASE_RUN_ID}" \
      #         | \
      #         jq -r '.status')
      #     }

      #     max_iterations=5
      #     check_status
      #     while [[ "${EXAMPLES_RELEASE_STATUS}" != "completed" ]]; do
      #       sleep 180 #Release manager typically takes around 2.5 minutes
      #       check_status
      #       max_iterations=$((max_iterations-1))
      #       if [[ "$max_iterations" -le "0" ]]; then
      #         echo "::error::Examples Release Manager seems to be stuck, status won't hit completion"
      #         exit 1
      #       fi
      #     done
      #     echo "::debug::Finish \"Wait for Examples Release Manager to Succeed\" API Call"

      #     sleep 30

      #     echo "::debug::Start \"Get Success Status of Examples Release Workflow\" API Call"
      #     EXAMPLES_RELEASE_CONCLUSION=$( \
      #         curl -L \
      #           -H "Accept: application/vnd.github+json" \
      #           -H "Authorization: Bearer ${OPENHORIZON_ORGANIZATION_RELEASE_TOKEN}"\
      #           -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #           "https://api.github.com/repos/${{ env.EXAMPLES_REPOSITORY_OWNER }}/${{ env.EXAMPLES_REPOSITORY_NAME }}/actions/runs/${EXAMPLES_RELEASE_RUN_ID}" \
      #           | \
      #           jq -r '.conclusion')
          
      #     if [[ "${EXAMPLES_RELEASE_CONCLUSION}" != "success" ]]; then
      #         echo "::error::Examples Release Manager appears to have failed or been cancelled"
      #         exit 1
      #     fi
      #     echo "::debug::Finish \"Get Success Status of Examples Release Workflow\" API Call"

      #     echo "::debug::Step Success"
      #   shell: bash
      #   env:
      #     JSON_PAYLOAD: ${{ github.event.inputs.VERSION_JSON_FILE }}

      - name: Create Open Horizon Release
        run: |
          cd $RUNNER_TEMP
          printf "
          ### Open Horizon 1.0.0 Release Information
          
          **Releases tied to v1.0.0** \n
          - Anax: https://github.com/blakep7/anax/releases/tag/v${AGBOT_VERSION}
          - Examples: https://github.com/blakep7/examples/releases/tag/v${AGBOT_VERSION}
          " > OH_RELEASE.txt

          gh release create v${{ vars.OPENHORIZON_RELEASE_VERSION }} \
            -t "Open Horizon Release v${{ vars.OPENHORIZON_RELEASE_VERSION }}" \
            -F OH_RELEASE.txt
        env:
          AGBOT_VERSION: ${{ fromJSON(github.event.inputs.VERSION_JSON_FILE).amd64_agbot }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_HOST: github.com
    
      - name: Increment Open Horizon Release Version
        run: |
          if [ "$INCREMENT_MAJOR_VERSION" = true ]; then
            IFS='.' read -r major minor patch <<< "$OPENHORIZON_RELEASE_VERSION"
            ((major++))
            minor=0
            patch=0
            NEW_RELEASE="$major.$minor.$patch"
          elif [ "$INCREMENT_MINOR_VERSION" = true ]; then
            IFS='.' read -r major minor patch <<< "$OPENHORIZON_RELEASE_VERSION"
            ((minor++))
            patch=0
            NEW_RELEASE="$major.$minor.$patch"
          elif [ "$INCREMENT_PATCH_VERSION" = true ]; then
            IFS='.' read -r major minor patch <<< "$OPENHORIZON_RELEASE_VERSION"
            ((patch++))
            NEW_RELEASE="$major.$minor.$patch"
          else
            echo "::warning::No version increment flag set."
            exit 0
          fi

          UPDATE_SEMANTIC_VERSION_DATA=$(jq -c -n '{"name":"OPENHORIZON_RELEASE_VERSION","value":$NEW_RELEASE}' --arg NEW_RELEASE "${NEW_RELEASE}")

          STATUS_CHECK_UPDATE_VARIABLE=$( \
            curl -L \
              -w "%{http_code}\\n" \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "X-GitHub-Api-Version: ${GITHUB_REST_API_VERSION}" \
              https://api.github.com/repos/${{ github.repository }}/actions/variables/OPENHORIZON_RELEASE_VERSION \
              -d "${UPDATE_SEMANTIC_VERSION_DATA}")

          if [[ "${STATUS_CHECK_UPDATE_VARIABLE}" != *"204"* ]]; then
            echo "::error::Update Open Horizon Semantic Version API call returned bad status code"
            echo -e "Status:\n${STATUS_CHECK_UPDATE_VARIABLE}"
            exit 1
          fi
        env:
          OPENHORIZON_RELEASE_VERSION: ${{ vars.OPENHORIZON_RELEASE_VERSION }}
          INCREMENT_MAJOR_VERSION: ${{ github.event.inputs.INCREMENT_MAJOR_VERSION }}
          INCREMENT_MINOR_VERSION: ${{ github.event.inputs.INCREMENT_MINOR_VERSION }}
          INCREMENT_PATCH_VERSION: ${{ github.event.inputs.INCREMENT_PATCH_VERSION }}