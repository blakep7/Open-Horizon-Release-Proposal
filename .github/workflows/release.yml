name: Open Horizon Release Manager

on:
  workflow_dispatch:

env:
  VERSION_SPECIFICATION_FILE_PATH: release_versions.json

  GITHUB_REST_API_VERSION: 2022-11-28

  ANAX_REPOSITORY_OWNER: ${{ github.repository_owner }}
  ANAX_REPOSITORY_NAME: anax
  ANAX_RELEASE_MANAGER_FILE_NAME: release.yml
  ANAX_RELEASE_ENVIRONMENT_NAME: release_environment

jobs:

  release:
    runs-on: ubuntu-20.04

    environment: release_environment

    steps:
      # Checkout our Github repo
      - name: Checkout Github Repo
        uses: actions/checkout@v3

      - name: Test 1
        id: test1
        run: |
          cd ${GITHUB_WORKSPACE}
          echo "AGBOT_VERSION=$(jq -r '.amd64_agbot' $VERSION_SPECIFICATION_FILE_PATH)" >> "$GITHUB_OUTPUT"
          echo "ANAX_VERSION=$(jq -r '.amd64_anax' $VERSION_SPECIFICATION_FILE_PATH)" >> "$GITHUB_OUTPUT"
          echo "ANAX_K8S_VERSION=$(jq -r '.amd64_anax_k8s' $VERSION_SPECIFICATION_FILE_PATH)" >> "$GITHUB_OUTPUT"
          echo "ANAX_CSS_VERSION=$(jq -r '.amd64_cloud-sync-service' $VERSION_SPECIFICATION_FILE_PATH)" >> "$GITHUB_OUTPUT"
          echo "ANAX_ESS_VERSION=$(jq -r '.amd64_edge-sync-service' $VERSION_SPECIFICATION_FILE_PATH)" >> "$GITHUB_OUTPUT"

      - name: Test 2
        run: |
          echo
        env:
          AGBOT_VERSION: ${{ steps.test1.outputs.AGBOT_VERSION }}
          ANAX_VERSION: ${{ steps.test1.outputs.ANAX_VERSION }}
          ANAX_K8S_VERSION: ${{ steps.test1.outputs.ANAX_K8S_VERSION }}
          ANAX_CSS_VERSION: ${{ steps.test1.outputs.ANAX_CSS_VERSION }}
          ANAX_ESS_VERSION: ${{ steps.test1.outputs.ANAX_ESS_VERSION }}

      # - name: Trigger Anax Release Manager
      #   run: |
      #     # Get Anax Release Environment ID
      #       ANAX_RELEASE_ENVIRONMENT_ID=$( \
      #         curl -L \
      #           -H "Accept: application/vnd.github+json" \
      #           -H "Authorization: Bearer ${GITHUB_TOKEN}" \
      #           -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #           'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/environments/${{ env.ANAX_RELEASE_ENVIRONMENT_NAME }}' \
      #           | \
      #           jq -r '.id')

      #     # Trigger Anax Release Manager
      #     curl -L \
      #       -X POST \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer ${GITHUB_TOKEN}" \
      #       -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #       'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/workflows/${{ env.ANAX_RELEASE_MANAGER_FILE_NAME }}/dispatches' \
      #       -d '{"ref":"dev-release-mgmt","inputs":{"AGBOT_VERSION": "${{ env.AGBOT_VERSION }}","ANAX_VERSION": "${{ env.ANAX_VERSION }}","ANAX_K8S_VERSION": "${{ env.ANAX_K8S_VERSION }}","ANAX_CSS_VERSION": "${{ env.ANAX_CSS_VERSION }}","ANAX_ESS_VERSION": "${{ env.ANAX_ESS_VERSION }}"}}'

      #     # List most recent triggered workflows that are waiting for a deployment review, use jq to filter down to release runs created today
      #     ANAX_RELEASE_RUN_ID=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${GITHUB_TOKEN}" \
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         'https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs?status=waiting&event=workflow_dispatch&per_page=10&page=1' \
      #         | \
      #         jq -r '[.workflow_runs[] | select( .path == ".github/workflows/${{ env.ANAX_RELEASE_MANAGER_FILE_NAME }}" )][0].id')

      #     # Approve workflow run automatically as this workflow run was approved
      #     ACCEPT_ANAX_RELEASE_API_CALL_DATA=$(jq -c -n '{"environment_ids":[$ARGS.positional[]],"state":"approved","comment":"Triggered automatically via approval from open-horizon/release"}' --jsonargs $ANAX_RELEASE_ENVIRONMENT_ID)

      #     curl -L \
      #       -X POST \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer ${GITHUB_TOKEN}" \
      #       -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #       "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}/pending_deployments" \
      #       -d "${ACCEPT_ANAX_RELEASE_API_CALL_DATA}"

      #     # Wait until the Anax Release Manager has succeeded
      #     check_status () {
      #     ANAX_RELEASE_STATUS=$( \
      #       curl -L \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${GITHUB_TOKEN}"\
      #         -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #         "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}" \
      #         | \
      #         jq -r '.status')
      #     }

      #     max_iterations=5
      #     check_status
      #     while [[ "${ANAX_RELEASE_STATUS}" != "completed" ]]; do
      #       sleep 360 #Release manager typically takes around 5.5 minutes
      #       check_status
      #       max_iterations=$((max_iterations-1))
      #       if [[ "$max_iterations" -le "5" ]]; then
      #         echo "::error::Anax Release Manager seems to be stuck, status won't hit completion"
      #         exit 1
      #       fi
      #     done

      #     ANAX_RELEASE_CONCLUSION=$( \
      #         curl -L \
      #           -H "Accept: application/vnd.github+json" \
      #           -H "Authorization: Bearer ${GITHUB_TOKEN}"\
      #           -H "X-GitHub-Api-Version: ${{ env.GITHUB_REST_API_VERSION }}" \
      #           "https://api.github.com/repos/${{ env.ANAX_REPOSITORY_OWNER }}/${{ env.ANAX_REPOSITORY_NAME }}/actions/runs/${ANAX_RELEASE_RUN_ID}" \
      #           | \
      #           jq -r '.conclusion')
          
      #     if [[ "${ANAX_RELEASE_CONCLUSION}" != "success" ]]; then
      #         echo "::error::Anax Release Manager appears to have failed or been cancelled"
      #         exit 1
      #     fi

      #     echo "Success"

      #   env:
      #     AGBOT_VERSION: ${{ fromJSON(github.event.client_payload.versionJSON).amd64_agbot }}
      #     ANAX_VERSION: ${{ fromJSON(github.event.client_payload.versionJSON).amd64_anax }}
      #     ANAX_K8S_VERSION: ${{ fromJSON(github.event.client_payload.versionJSON).amd64_anax_k8s }}
      #     ANAX_CSS_VERSION: ${{ fromJSON(github.event.client_payload.versionJSON).amd64_cloud-sync-service }}
      #     ANAX_ESS_VERSION: ${{ fromJSON(github.event.client_payload.versionJSON).amd64_edge-sync-service }}